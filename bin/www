#!/usr/bin/env node

/**
 * Module dependencies.
 */

var cluster = require('cluster');

if (cluster.isMaster) {
  var numCPUs = require('os').cpus().length;

  for (var i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', function() {
    console.log('[master:%s] A worker process died, restarting...', process.pid);
    cluster.fork();
  });
} else {
  var app = require('../app');
  var debug = require('debug')('s3proxy:server');
  var http = require('http');
  var config = require('../config');
  var port = normalizePort(config.get('port'));
  app.set('port', port);
  var server = http.createServer(app);
  server.listen(port, config.get('host'));
  server.on('error', onError);
  server.on('listening', onListening);
}



function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) { return val; }
  if (port >= 0) { return port; }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('[%d] Listening on %s', process.pid, bind);
}
